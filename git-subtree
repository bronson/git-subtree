#!/bin/sh

# git-subtree
# Scott Bronson, 27 May 2009
# based on http://dysinger.net/2008/04/29/replacing-braid-or-piston-for-git-with-40-lines-of-rake/
# also see http://www.kernel.org/pub/software/scm/git/docs/howto/using-merge-subtree.html

# This should work under bash, dash, ksh, zsh, hopefully any posix shell.

# TODO: add and clone commands should support -t: restrict branches pulled
# TODO: crib from http://github.com/apenwarr/git-subtree/tree/master
#       to extract patches from the subtree.
# TODO: (far in the future) can I have two subtrees cloned from the same
#       upstream?  How does the merge specify which subtree to affect?
# TODO: can I clone another subtree into an already cloned subtree?
# TODO: ensure that git bisect works

# Environment Variables (TODO should convert these into cmdline args):
#   DRY_RUN=1 -- show what would happen but don't do it
#   VERBOSE=1 -- display the git commands as we run them
# usage: $ DRY_RUN=1 git-subtree add http://foo

cmdname="git-subtree"
commands="help clone pull add branch diff fetch list merge"


run() {
  if [ "x$DRY_RUN" = "x" ]; then
    [ "x$VERBOSE" != "x" ] && echo "Running: $@"
    "$@"
    [ "x$VERBOSE" != "x" ] && echo " Result: $?"
  else
    echo "Not running: $@"
  fi
}

# this is a crappy hack to get some git commands to please be quiet.
# git merge: how do I suppress "Automatic merge went well; stopped..." and
#   "Squash commit -- not updating HEAD" messages??
# git fetch: how do I suppress "warning: no common commits" and
#   "From file:////tmp/tmtest.MnYyIf/upstream * [new branch]" messages??
run_quiet() {
  if [ "x$DRY_RUN" = "x" ]; then
    [ "x$VERBOSE" != "x" ] && echo "Running: $@" ">/dev/null 2>&1"
    "$@" >/dev/null 2>&1
    [ "x$VERBOSE" != "x" ] && echo " Result: $?"
  else
    echo "Not running: $@"
  fi
}

guess_dir_name() {
  # This should match guess_dir_name in builtin-clone.c
  echo "$(basename "$1" .git)"
}

ensure_repo_has_commits() {
  git rev-list --all --max-count=1 >/dev/null 2>&1
  [ "$?" != "0" ] && die "You need at least one commit before you can add a subtree."
}

die() {
  [ -n "$1" ] && echo "$1" >&2
  exit 1
}

# longest_matching_prefix foobar fooby => foob
longest_matching_prefix() {
  a="$1"; b="$2"
  while [ -n "$b" ] && [ "${a#"$b"}" = "$a" ]; do
    b="${b%?}"
  done
  echo "$b"
}

# if a string contains questionable characters, double quote it.
double_quote_escape() {
  str="$1"
  bad_char_pos="$(expr match "$str" '.*[^a-zA-Z0-9_,./:-]')"
  if [ "$bad_char_pos" != "0" ]; then
    str="\"$(echo "$str" | sed 's/\([$`"\]\)/\\\1/g')\""
  fi
  echo "$str"
}

# git doesn't offer a way to split a remote tracking branch into the name
# of the remote and the name of the branch.  so, I'll iterate over all the
# remotes looking for the longest match.
# NOTE: returns results in two globals: remote and branch
split_tracking_branch() {
  tracking="$1"

  while read line; do
    ttb="${tracking#"$line/"}"
    if [ "$ttb" != "$tracking" ]; then
      if [ $((${#tracking} - ${#ttb})) -gt ${#remote} ]; then
        remote="$line"
        branch="$ttb"
      fi
    fi
  done <<EOL
$(git remote)
EOL

  if [ -z "$remote" ] || [ -z "$branch" ]; then
    echo "Could not find remote tracking branch from $tracking?! remote=$remote branch=$branch"
    return 1
  fi
  return 0
}

find_branchfile() {
  # Make sure we only shell out to git once even if unrelated functions
  # need to access the branchfile.
  if [ -z "$branchfile" ]; then
    branchfile="$(git rev-parse --show-cdup).git-subtrees"
  fi
}

# The first argument is the name of a function to call for each line in
# the file.  callback args are the unescaped directory and branch.
# If the callback returns a nonzero exit, the loop is terminated immediately.
parse_branchfile() {
  callback="$1"

  find_branchfile
  [ ! -f "$branchfile" ] && die "this repo doesn't have any subtrees."

  # use perl to parse the branchfile since parsing the quoting would
  # require either eval (security!) or one hell of a lot of code.  Ugh.
  # using perl's shellwords.pl is not ideal since it converts '\a' to 'a'
  # but double_quote_escape only produces escaped backslashes so it's OK.
  oldIFS="$IFS"; IFS=
  bfgot= bfline= bfdir= bfref=
  while read -r line; do
    if [ "$line" = '""' ]; then
      IFS="$oldIFS"
      # echo "$callback" "<<$bfline>>" "<<$bfdir>>" "<<$bfref>>" >&2 # DBG
      "$callback" "$bfline" "$bfdir" "$bfref"
      ret="$?"
      if [ "$ret" != "0" ]; then return $ret; fi
      IFS= bfgot= bfline= bfdir= bfref=
    elif [ -z "$bfline" ]; then bfline="$line"; bfgot=1
    elif [ -z "$bfdir" ]; then bfdir="$line" #; echo dir="<<$bfdir>>" >&2 # DBG
    elif [ -z "$bfref" ]; then bfref="$line" #; echo ref="<<$bfref>>" >&2 # DBG
    else die "garbage in $branchfile: $line"
    fi
  done <<EOL
$(perl -e 'require "shellwords.pl"; while(<>) { chomp; print "$_\n"; unless(/^\s*#/) { for(shellwords($_)) { print "$_\n" }}; print "\"\"\n" }' "$branchfile")
EOL
  IFS="$oldIFS"
  [ -n "$bfgot" ] && "$callback" "$bfline" "$bfdir" "$bfref"
  return 0
}

skip_by_directory() {
  if [ "$2" != "$directory" ]; then
    echo "$1"
  fi
  return 0
}

# I couldn't find a good way to query the commit history to determine
# the remote tracking branch that the most recent merge came from.
# So, I'll cache that info in /.gitsubtrees and hope that someone
# can figure out how to do this better.  TODO?
store_remote_tracking_branch() {
  tracking="$1"
  directory="${2%/}"

  escdir="$(double_quote_escape "$directory")"
  esctrack="$(double_quote_escape "$tracking")"

  # slurp the file without the old remote, print with the new one
  find_branchfile
  if [ -f "$branchfile" ]; then
    contents="$(parse_branchfile skip_by_directory)"
  else
    contents="# generated by $cmdname, do not edit!
# (the left column tells the directory that received the merge,
# the right column names the branch or ref that was merged into it)
"
  fi
  printf "$contents\n$escdir $esctrack\n" > "$branchfile"

  git add "$branchfile"
}

match_by_directory() {
  if [ "$2" = "$directory" ]; then
    echo "$3"
    return 2
  fi
  return 0
}

find_remote_tracking_branch() {
  directory="${1%/}"
  [ -z "$directory" ] && die "please specify a subtree."

  matched_ref="$(parse_branchfile match_by_directory)"
  [ "$?" = "1" ] && die  # propagate death
  [ -z "$matched_ref" ] && die "could not find $directory in known subtrees."

  echo "$matched_ref"
}

# Ensures the given name is a valid branch name, otherwise we die.
check_branch_name() {
  branch="$1"
  
  # read from heredoc so command won't occur in a subshell
  while read -r line ; do
    [ "$line" = "$branch" ] && return 0
  done <<EOL
$(git branch -r | sed -e 's/^\s*//')
EOL

  return 2
}


clone_help=\
"$cmdname clone <repository> [<branch>] [<directory>] [<remote-name>]
  Creates a new subtree checked out to the given branch of the given repo.
  It is equivalent to $cmdname add; $cmdname fetch; $cmdname merge
    repository: the URL of the repository to clone
    branch:     the remote branch to check out, defaults to master
    directory:  the directory to create, defaults to the name of the repo
    remotename: see $cmdname add
"
clone() {
  ensure_repo_has_commits

  cloneurl="$1"
  clonebranch="$2"
  clonedir="$3"
  remotename="$4"

  curdir="$(git rev-parse --show-prefix)"

  [ "x$cloneurl" = "x" ] && die "usage: $cmdname clone <name> <url>"
  [ "x$clonebranch" = "x" ] && clonebranch="master"
  [ "x$clonedir" = "x" ] && clonedir="$(guess_dir_name "$cloneurl")"
  [ "x$remotename" = "x" ] && remotename="$curdir$clonedir"

  add "$cloneurl" "$remotename"
  fetch "$remotename"
  merge "$remotename/$clonebranch" "$clonedir"
}


pull_help=\
"$cmdname pull [<branch>] [<directory>] [<remote-name>]
  Pulls down the most recent commits to the remote repository and commits
  them to the subtree.  Equivalent to $cmdname fetch; $cmdname merge
    branch:     the remote branch to check out, defaults to master
    directory:  directory to receive the result, defaults to the current dir
    remotename: see $cmdname add
"
pull() {
  pullbranch="$1"
  pulldirectory="$2"
  pullremotename="$3"

  fetch "$pullremotename"
  merge "$pullbranch" "$pulldirectory"
}


add_help=\
"$cmdname add <repository> [<remote-name>]
  Adds knowledge of the given subtree to the repo but doesn't check anything
  out.  See $cmdname clone for the easy way to create a subtree.
    repository: the URL of the repository to clone
    remotename: the name to assign to this remote (see git remote)
"
add() {
  ensure_repo_has_commits

  remoteurl="${1%/}"
  remotename="$2"

  [ "x$remoteurl" = "x" ] && die "usage: $cmdname add <name> <url>"
  if [ "x$remotename" = "x" ]; then
    curdir="$(git rev-parse --show-prefix)"
    directory="$(guess_dir_name "$remoteurl")"
    remotename="$curdir$directory"
  fi

  run git remote add "$remotename" "$remoteurl"
  run git config remote."$remotename".fetch refs/heads/\*:refs/remotes/"$remotename"/\*
  run git config --add remote."$remotename".fetch refs/tags/\*:refs/remotes/"$remotename"/tags/\*
  run git config remote."$remotename".tagopt --no-tags
}


branch_help=\
"$cmdname branch [<directory>]
  Displays the branch your subtree is on and the branches that the remote
  provides.  Use $cmdname checkout to switch branches.
    directory: the directory of the subtree, defaults to the current dir.
"
branch() {
  directory="$1"
  [ "$directory" = "." ] && directory=

  absdir="$(git rev-parse --show-prefix)$directory"
  tracking_branch="$(find_remote_tracking_branch "$absdir")"
  [ -z "$tracking_branch" ] && die  # message is already printed
 
  split_tracking_branch "$tracking_branch"
  # now "remote" and "branch" are the components of tracking_branch

  # show all branches for this remote with a star next to the
  # most-recently-merged branch.
  git branch -r | sed -e 's/^\s*//' | while read -r line; do
    b="${line#"$remote/"}"
    if [ "$b" != "$line" ]; then
      if [ "$b" = "$branch" ]; then
        echo "* $b"
      else
        echo "  $b"
      fi
    fi
  done
}


fetch_help=\
"$cmdname fetch [<remote>]: fetches objects from the remote repo
  remote: The name of the remote to fetch from (see git remote).
          If the current directory is a subtree, it defaults to its remote.

  Other than figuring out a default remote to use if you don't name one
  on the command line, $cmdname fetch is exactly the same as git fetch.
"
fetch() {
  remote="$1"

  if [ "x$remote" = "x" ]; then
    # User didn't give a remote, check if current dir is a subtree
    directory="$(git rev-parse --show-prefix)"
    directory="${directory%/}"
    branch="$(parse_branchfile match_by_directory)"
    [ -z "$branch" ] && die "$directory is not a subtree. If you're sure it is, specify a remote."
    split_tracking_branch "$branch"
    # now remote contains the name of the branch
  fi

  run_quiet git fetch -q "$remote"
}


print_directory() { [ -n "$2" ] && echo "  $2"; return 0; }
print_directory_v() { [ -n "$2" ] && echo "  $2: $3"; return 0; }

list_help=\
"$cmdname list [-v]: lists the subtrees in the current repository.
  -v: also display each subtree's most recent merge.
"
list() {
  if [ "$1" = "-v" ]
  then parse_branchfile print_directory_v
  else parse_branchfile print_directory
  fi
}


# looks in the branchfile for absdir, sets mergebranch if found
merge_look_up_branch() {
  directory="${absdir%/}"
  mergebranch="$(parse_branchfile match_by_directory)"
  [ -z "$mergebranch" ] && die "$reldir is not a subtree. If you're sure it is, specify a branch."
}

merge_help=\
"$cmdname merge <branch> [<directory>]
  Merges the subtree into a directory in the master repository.
    branch:    the branch to merge, i.e. remote/master or, if you're in
        a subtree, simply 'master' will suffice.  If not supplied, defaults
        to the branch that was most recently merged into this subtree.
    directory: where to merge the subtree (defaults to the current directory)

  Merging won't take you backward in time.  If you want to remove commits
  from a subtree, it might be easiest just to delete it and re-clone it.
"
merge() {
  mergebranch="$1"
  reldir="$2"

  [ "$reldir" = "." ] && reldir=
  absdir="$(git rev-parse --show-prefix)$reldir"

  if [ "x$mergebranch" = "x" ]; then
    merge_look_up_branch
  fi

  # only checks remotes so it's OK to pass an unqualified branch
  check_branch_name "$mergebranch"
  if [ "$?" = "2" ]; then
    # maybe it wasn't a full remote tracking branch, try qualifying it
    shortbranch="$mergebranch"
    merge_look_up_branch
    split_tracking_branch "$mergebranch"
    check_branch_name "$remote/$shortbranch"
    [ "$?" = "2" ] && die "Branch $shortbranch does not exist!"
  fi

  # refuse to merge into the root dir
  dir="$reldir"
  [ -z "$dir" ] && dir='.'
  if [ -d "$dir" ]; then
    msg="$(cd "$dir" && [ -n "$(git rev-parse --show-prefix)" ] && echo ok)"
    [ "$msg" != "ok" ] && die "can only merge into a subdirectory of a git repository."
  fi

  if [ "x$reldir" = "x" ] || [ -e "$reldir" ]; then
    # If the destination already exists, we need to actually merge
    run_quiet git merge -s subtree --no-commit "$mergebranch"
  else
    # otherwise, record a merge and read the tree
    run_quiet git merge -s ours --no-commit "$mergebranch"
    run git read-tree --prefix="$reldir" -u "$mergebranch"
  fi

  store_remote_tracking_branch "$mergebranch" "$absdir"
}



diff_help=\
"Diffs a subtree against the remote
"
diff() {
  branch="$1"

  [ "x$branch" = "x" ] && die "usage: $cmdname diff <branch>"

  run git diff-tree -p --no-commit-id "$branch"
}



help_help="Shows help text for the given command"

help() {
  if [ "x$1" = "x" ]; then
# TODO: once the commands settle down, put an example usage into this help text
    echo \
"$cmdname places another git repository into a subtree of your current
project.  It's like git submodule except that you can still branch and
merge when it's in your repo.
"
    return 0
  fi

  for i in $commands; do
    if [ "$i" = "$1" ]; then
      echo
      echo "$(eval "echo \"\$${i}_help\"")"
      echo
      return 0
    fi
  done

  echo "Unknown command: $1"
  return 1
}



cmd="$1"
for i in $commands; do
  if [ "$i" = "$cmd" ]; then
    shift
    "$cmd" "$@"
    exit $?
  fi
done

if [ "x$cmd" = "x" ]; then
  echo "You must supply a command to execute!"
else
  echo "unknown command: $cmd"
fi
echo "  some $cmdname subcommands: $commands"
exit 1

