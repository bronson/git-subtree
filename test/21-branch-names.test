# Test some pretty pathological branch names.
# Also, ensure we show the correct branch even when there are other
# branches at the same commit.  

. $MYDIR/utilities.sh

MKDIR dir

# set up the test repos
create_repo "$dir/proj"
commit_new_file "$dir/proj" "tempfile"
create_repo "$dir/upstream"
commit_new_file "$dir/upstream" "upstream-1"
cd "$dir/upstream"


branches=\
"branches/1
branches/\$
d.\"dot\"
-dot's
!
\$!"


git checkout -q -b branch
while read -r branch; do
  git checkout -q -b "$branch"
done <<EOL
$branches
EOL

# Add the subtree
cd "$dir/proj"

git-subtree clone "file://$dir/upstream" branch
git commit -q -m "add upstream subtree"

cd upstream
echo "initial branch:"
git-subtree branch

while read -r branch; do
  echo "merge $branch"
  git-subtree merge "upstream/$branch"
  git-subtree branch
done <<EOL
$branches
EOL

cd "$dir/proj"
echo ".git-subtrees:"
cat .git-subtrees | sed -e 's/^/  /'

cd "$dir"
rm -rf upstream proj

STDOUT:
initial branch:
  !
  $!
  -dot's
* branch
  branches/$
  branches/1
  d."dot"
  master
merge branches/1
  !
  $!
  -dot's
  branch
  branches/$
* branches/1
  d."dot"
  master
merge branches/$
  !
  $!
  -dot's
  branch
* branches/$
  branches/1
  d."dot"
  master
merge d."dot"
  !
  $!
  -dot's
  branch
  branches/$
  branches/1
* d."dot"
  master
merge -dot's
  !
  $!
* -dot's
  branch
  branches/$
  branches/1
  d."dot"
  master
merge !
* !
  $!
  -dot's
  branch
  branches/$
  branches/1
  d."dot"
  master
merge $!
  !
* $!
  -dot's
  branch
  branches/$
  branches/1
  d."dot"
  master
.git-subtrees:
  # generated by git-subtree, do not edit!
  # (the left column tells the directory that received the merge,
  # the right column names the branch or ref that was merged into it)
  upstream "upstream/\$!"
