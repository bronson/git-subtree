# This test is the same as implicit.test, except that it operates on a
# branch OTHER than master.  It tries both pull and fetch/merge.

# exec 2>&1; set -x

. $MYDIR/utilities.sh

MKDIR dir

# create the repo with a branch
set_up_a_repo_and_one_upstream
cd "$dir/upstream"
git checkout -q -b izbranch
git branch -D master  # ensure hitting master will bomb

# Add the subtree
cd "$dir/proj"
git-subtree clone "file://$dir/upstream" izbranch
# TODO: this commit needs to disappear
git commit -q -m "add upstream subtree"

cd "$dir/proj/upstream"

# another commit appears upstream
commit_new_file "$dir/upstream" "upstream-2"

git-subtree fetch
git-subtree merge
# TODO: get rid of this commit
git commit -q -m "update upstream subtree"

commit_new_file "$dir/upstream" "upstream-3"
git-subtree pull
# TODO: get rid of this commit
git commit -q -m "update upstream subtree"

cd "$dir/proj"
# make sure all files are checked in
git ls-files -o -m

echo "BRANCH: "
cd upstream
git-subtree branch 2>&1
cd ..
echo "COMMITS (unordered):"
git log --pretty=tformat:%s | sort
echo "FILES:"
cd "$dir/proj"
find . -name .git -prune -o -type f -print | sort
echo ".git-subtrees:"
cat .git-subtrees

cd "$dir"
rm -rf upstream proj

STDOUT:
Deleted branch master.
BRANCH: 
* izbranch
COMMITS (unordered):
add upstream subtree
commit_new_file: create tempfile
commit_new_file: create upstream-1
commit_new_file: create upstream-2
commit_new_file: create upstream-3
update upstream subtree
update upstream subtree
FILES:
./.git-subtrees
./tempfile
./upstream/upstream-1
./upstream/upstream-2
./upstream/upstream-3
.git-subtrees:
# generated by git-subtree, do not edit!
# (the left column tells the directory that received the merge,
# the right column names the branch or ref that was merged into it)
upstream upstream/izbranch
