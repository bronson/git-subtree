# This test is exactly like implicit-story.test but uses longhand
# add/fetch/merge commands rather than the clone/pull shortcuts.
# Does everything on upstream's master branch.

. $MYDIR/utilities.sh

MKDIR dir

# set up the test repos
create_repo "$dir/proj"
commit_new_file "$dir/proj" "tempfile" "add meaningless tempfile to create a first commit"
create_repo "$dir/upstream"
commit_new_file "$dir/upstream" "upstream-1"
commit_new_file "$dir/upstream" "upstream-2"

# Add the subtree
cd "$dir/proj"

git-subtree add "file://$dir/upstream"
git-subtree fetch upstream
git-subtree merge upstream/master upstream
# TODO: this commit needs to disappear
git commit -q -m "add upstream subtree"

# another commit appears upstream
commit_new_file "$dir/upstream" "upstream-3"

cd "$dir/proj/upstream"
git-subtree fetch
# TODO: get rid of this "master"
git-subtree merge upstream/master
git commit -q -m "update upstream subtree"

cd "$dir/proj"
# make sure all files are checked in
git ls-files -o -m

echo "BRANCH: "
cd upstream
git-subtree branch 2>&1
cd ..
echo "COMMITS (unordered):"
git log --pretty=tformat:%s | sort
echo "FILES:"
cd "$dir/proj"
find . -name .git -prune -o -type f -print | sort
echo ".git-subtrees:"
cat .git-subtrees

cd "$dir"
rm -rf upstream proj

STDOUT:
BRANCH: 
* master
COMMITS (unordered):
add meaningless tempfile to create a first commit
add upstream subtree
commit_new_file: create upstream-1
commit_new_file: create upstream-2
commit_new_file: create upstream-3
update upstream subtree
FILES:
./.git-subtrees
./tempfile
./upstream/upstream-1
./upstream/upstream-2
./upstream/upstream-3
.git-subtrees:
# generated by git-subtree, do not edit!
# (the left column tells the directory that received the merge,
# the right column names the branch or ref that was merged into it)
upstream upstream/master
