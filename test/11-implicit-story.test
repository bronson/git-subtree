# This test calls subtree commands but doesn't name the remote
# explicitly, the script determines it implicitly from the cwd.

# TODO: add a checkout command to switch the branch your subtree is on
# TODO: make merge look up previous branch if not supplied
# TODO: automatically commit the results after merging
# TODO: add a --no-commit option to clone, pull and merge.

# exec 2>&1; set -x

. $MYDIR/utilities.sh

MKDIR dir

# set up the test repos
create_repo "$dir/proj"
commit_new_file "$dir/proj" "tempfile" "add meaningless tempfile to create a first commit"
create_repo "$dir/upstream"
commit_new_file "$dir/upstream" "upstream-1"
commit_new_file "$dir/upstream" "upstream-2"

# Add the subtree
cd "$dir/proj"

git-subtree clone "file://$dir/upstream"
# TODO: this commit needs to disappear
git commit -q -m "add upstream subtree"

# another commit appears upstream
commit_new_file "$dir/upstream" "upstream-3"

cd "$dir/proj/upstream"
git-subtree pull master
git commit -q -m "update upstream subtree"

echo "BRANCH: "
git-subtree branch 2>&1
echo "COMMITS (unordered):"
git log --pretty=tformat:%s | sort
echo "FILES:"
cd "$dir/proj"
find . -name .git -prune -o -type f -print | sort
echo ".git-subtrees:"
cat .git-subtrees

cd "$dir"
rm -rf upstream proj

STDOUT:
BRANCH: 
* master
COMMITS (unordered):
add meaningless tempfile to create a first commit
add upstream subtree
commit_new_file: create upstream-1
commit_new_file: create upstream-2
commit_new_file: create upstream-3
update upstream subtree
FILES:
./.git-subtrees
./tempfile
./upstream/upstream-1
./upstream/upstream-2
./upstream/upstream-3
.git-subtrees:
# generated by git-subtree, do not edit!
upstream upstream/master
