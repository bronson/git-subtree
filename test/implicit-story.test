# This test calls subtree commands but doesn't name the remote
# explicitly, the script determines it implicitly from the cwd.

# TODO: add a pull command, the combo of a fetch and a merge
# TODO: get rid of update, make merge able to work on an already-merged tree
# TODO: remember the branch we're on somehow
# TODO: the difference between merge and update is pretty artificial.
# TODO: switch to using a branch rather than a squash
# TODO: remove the need to commit the results after merging

# exec 2>&1; set -x

. $MYDIR/utilities.sh

MKDIR dir

# set up the test repos
create_repo "$dir/proj"
commit_new_file "$dir/proj" "tempfile" "add meaningless tempfile to create a first commit"
create_repo "$dir/upstream"
commit_new_file "$dir/upstream" "upstream-1"
commit_new_file "$dir/upstream" "upstream-2"

# Add the subtree
cd "$dir/proj"
mkdir updir
cd updir
git-subtree add "file:///$dir/upstream"
# TODO: this merge needs to disappear.  Yuck.
git-subtree merge updir/upstream/master updir/upstream
git commit -q -m "add upstream subtree"

# another commit appears upstream
commit_new_file "$dir/upstream" "upstream-3"

# pull the objects into our project
cd upstream
git-subtree fetch
echo "DIFF:"
# head -n -1 is to suppress the final "index 0000000..e69de29" line
# TODO: need to get branch name out of here
git-subtree diff updir/upstream/master | head -n -1

# and update the subtree
# TODO: need to get branch name out of here
git-subtree update updir/upstream updir/upstream/master
git commit -q -m "update upstream subtree"

echo "COMMITS:"
git log --pretty=tformat:%s
echo "FILES:"
cd "$dir/proj"
find updir

cd "$dir"
rm -rf upstream proj

STDOUT:
DIFF:
diff --git a/upstream-3 b/upstream-3
new file mode 100644
COMMITS:
update upstream subtree
add upstream subtree
add meaningless tempfile to create a first commit
FILES:
updir
updir/upstream
updir/upstream/upstream-3
updir/upstream/upstream-2
updir/upstream/upstream-1
