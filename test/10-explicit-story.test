# This test calls subtree commands with explicit paths and branch names

# exec 2>&1; set -x

. $MYDIR/utilities.sh

MKDIR dir

# set up the test repos
create_repo "$dir/proj"
commit_new_file "$dir/proj" "tempfile" "add meaningless tempfile to create a first commit"
create_repo "$dir/upstream"
commit_new_file "$dir/upstream" "upstream-1"
cd "$dir/upstream"
git checkout -q -b upbranch
commit_new_file "$dir/upstream" "upstream-2"

# add and merge the upstream subtree
cd "$dir/proj"
git-subtree clone "file://$dir/upstream" upbranch updir/upstream upremote
git commit -q -m "add upstream subtree"

# another commit appears upstream
commit_new_file "$dir/upstream" "upstream-3"

# fetch the objects into our project
git fetch -q upremote >/dev/null 2>&1
echo "DIFF:"
# suppress the last "index 0000000..e69de29" line
git-subtree diff upremote/upbranch | head -n -1
git-subtree merge upremote/upbranch updir/upstream
git commit -q -m "update upstream subtree"

# make sure all files are checked in
git ls-files -o -m

echo "BRANCH: "
git-subtree branch updir/upstream 2>&1
echo "COMMITS (unordered):"
git log --pretty=tformat:%s | sort
echo "FILES:"
find updir -type f -print | sort
echo ".git-subtrees:"
cat .git-subtrees

cd "$dir"
rm -rf upstream proj

STDOUT:
DIFF:
diff --git a/upstream-3 b/upstream-3
new file mode 100644
BRANCH: 
  master
* upbranch
COMMITS (unordered):
add meaningless tempfile to create a first commit
add upstream subtree
commit_new_file: create upstream-1
commit_new_file: create upstream-2
commit_new_file: create upstream-3
update upstream subtree
FILES:
updir/upstream/upstream-1
updir/upstream/upstream-2
updir/upstream/upstream-3
.git-subtrees:
# generated by git-subtree, do not edit!
# (the left column tells the directory that received the merge,
# the right column names the branch or ref that was merged into it)
updir/upstream upremote/upbranch
